plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.4.3'
  id 'org.owasp.dependencycheck' version '6.1.2'
  id 'com.github.ben-manes.versions' version '0.38.0'
  id 'org.sonarqube' version '3.1.1'
  id 'au.com.dius.pact' version '4.1.7'
}

def versions = [
        pact_version       : '4.1.7'
]

ext['rest-assured.version'] = '4.0.0'

group = 'uk.gov.hmcts.reform'
version = '1.0.2'

sourceCompatibility = 11
targetCompatibility = 11

allprojects {
  apply plugin: 'checkstyle'
  apply plugin: 'com.github.ben-manes.versions'
  apply plugin: 'org.owasp.dependencycheck'

  sourceSets {
    functionalTest {
      java {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        srcDir file('src/functionalTest/java')
      }
      resources.srcDir file('src/functionalTest/resources')
    }

    integrationTest {
      java {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        srcDir file('src/integrationTest/java')
      }
      resources.srcDir file('src/integrationTest/resources')
    }

    contractTest {
      java {
        compileClasspath += main.output
        runtimeClasspath += main.output
        srcDir file('src/contractTest/java')
      }
      resources.srcDir file('src/contractTest/resources')
    }
  }

  tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
  }

  task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
  }

  task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
  }

  task smoke(type: Test) {
    description = "Runs Smoke Tests"
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath

    useJUnit {
      includeCategories 'uk.gov.hmcts.reform.pdf.service.SmokeTest'
    }
  }

  task contract(type: Test) {
    description = 'Runs the consumer Pact tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    systemProperty 'pact.rootDir', "pacts"
  }


  checkstyle {
    maxWarnings = 0
    toolVersion = '8.29'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configDir = new File(rootDir, 'config/checkstyle')
  }

  jacocoTestReport {
    executionData(test, integration)
    reports {
      xml.enabled = true
      csv.enabled = false
      xml.setDestination(file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"))
    }
  }

  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { version.toUpperCase().contains(it) }
    def regex = /^[0-9,\\.v\\-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
  }

  dependencyUpdates {
    rejectVersionIf {
      isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
  }

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
    analyzers {
      // Disable scanning of .NET related binaries
      assemblyEnabled = false
    }
  }

  repositories {
    jcenter()
    maven {
      url "https://dl.bintray.com/hmcts/hmcts-maven"
    }
  }

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.

  test {
    useJUnitPlatform()
    failFast = true
  }

  def flyingSaucerVersion = '9.1.20'

  dependencyManagement {
    imports {
      mavenBom "org.xhtmlrenderer:flying-saucer-pdf:${flyingSaucerVersion}"
    }
  }

  ext {
    junit = '5.6.2'
    reformLogging = '5.1.5'
    springfoxSwagger = '2.9.2'
    flyingSaucer = flyingSaucerVersion
    openPdf = dependencyManagement.importedProperties['openpdf.version']
  }

}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
project.tasks['check'].dependsOn integration

pmd {
  toolVersion = "6.11.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest]
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: RPE PDF Service"
    property "sonar.projectKey", "uk.gov.hmcts.reform:rpe-pdf-service"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  }
}

configurations.all {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group in ['com.fasterxml.jackson.core', 'com.fasterxml.jackson.module', 'com.fasterxml.jackson.datatype']) {
        details.useVersion '2.12.2'
      }

      if (details.requested.name == 'jackson-databind') {
        details.useVersion '2.12.2'
      }
    }
  }
}

ext {
    log4JVersion = "2.15.0"
}

dependencies {
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-json'

  compile group: 'io.springfox', name: 'springfox-swagger2', version: springfoxSwagger
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: springfoxSwagger

  compile group: 'com.google.guava', name: 'guava', version: '30.1-jre'

  compile group: 'uk.gov.hmcts.reform', name: 'logging', version: reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: reformLogging

  compile group: 'uk.gov.hmcts.reform', name: 'reform-api-standards', version: '0.4.0'


  compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.44'
  compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '9.0.44'

  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  compile group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit
  testImplementation("org.junit.vintage:junit-vintage-engine") {
    exclude group: "org.hamcrest", module: "hamcrest-core"
  }
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junit
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testCompile group: 'org.pdfbox', name: 'com.springsource.org.pdfbox', version: '0.7.3'

  integrationTestCompile sourceSets.main.runtimeClasspath
  integrationTestCompile sourceSets.test.runtimeClasspath

  functionalTestCompile sourceSets.main.runtimeClasspath
  functionalTestCompile sourceSets.test.runtimeClasspath
  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestCompile sourceSets.test.runtimeClasspath
  functionalTestCompile group: 'io.rest-assured', name: 'rest-assured'

  contractTestCompile group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pact_version
  contractTestCompile group: 'au.com.dius.pact.provider', name: 'spring', version: versions.pact_version
  contractTestCompile group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pact_version
  contractTestCompile("org.junit.jupiter:junit-jupiter-api:5.7.0")
  contractTestRuntime("org.junit.jupiter:junit-jupiter-engine:5.7.0")
  contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.7.0')

  compile project(':pdf-generator')
}


mainClassName = 'uk.gov.hmcts.reform.pdf.service.PDFServiceApplication'

bootJar {
  archiveName = 'pdf-service-all.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}


task runProviderPactVerification(type: Test) {
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

runProviderPactVerification.dependsOn contract

runProviderPactVerification.finalizedBy pactVerify

