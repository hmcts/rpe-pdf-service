plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.0'
  id 'org.springframework.boot' version '3.0.3'
  id 'org.owasp.dependencycheck' version '8.1.0'
  id 'com.github.ben-manes.versions' version '0.46.0'
  id 'se.patrikerdes.use-latest-versions' version '0.2.18'
  id 'org.sonarqube' version '4.0.0.2929'
  id 'au.com.dius.pact' version '4.5.1'
  id 'java'
  id 'jvm-test-suite'
}

group = 'uk.gov.hmcts.reform'
version = '1.0.2'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

testing {
  suites {
    test {
      useJUnitJupiter()
    }

    integrationTest(JvmTestSuite) {
      testType = TestSuiteType.INTEGRATION_TEST
      dependencies {
        implementation project()
        implementation sourceSets.test.runtimeClasspath
      }

      targets {
        all {
          testTask.configure {
            shouldRunAfter(test)
          }
        }
      }
    }

    functionalTest(JvmTestSuite) {
      testType = TestSuiteType.FUNCTIONAL_TEST
      dependencies {
        implementation project()
        implementation sourceSets.test.runtimeClasspath
      }
    }
    contractTest(JvmTestSuite) {
      dependencies {
        implementation project()
        implementation sourceSets.test.runtimeClasspath
      }
    }
  }
}

allprojects {
  apply plugin: 'checkstyle'
  apply plugin: 'com.github.ben-manes.versions'
  apply plugin: 'org.owasp.dependencycheck'

  tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
  }

  task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    dependsOn functionalTest
  }

  task smoke(type: Test) {
    description = "Runs Smoke Tests"

    group = 'verification'

    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath

    useJUnitPlatform {
      includeTags "SmokeTest"
    }

    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
  }

  checkstyle {
    maxWarnings = 0
    toolVersion = '10.8.0'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
  }

  jacocoTestReport {
    executionData(test, integrationTest)
    reports {
      xml.required = true
      csv.required = false
      xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
  }

  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { version.toUpperCase().contains(it) }
    def regex = /^[0-9,\\.v\\-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
  }

  dependencyManagement {
      dependencies {

          //CVE-2022-25857, CVE-2022-38749, CVE-2022-38750, CVE-2022-38751, CVE-2022-38752, CVE-2022-41854
          dependencySet(group: 'org.yaml', version: '2.0') {
              entry 'snakeyaml'
          }
      }
  }

  dependencyUpdates {
    rejectVersionIf {
      isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
  }

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
    analyzers {
      // Disable scanning of .NET related binaries
      assemblyEnabled = false
    }
    skipConfigurations = [
      "checkstyle",
      "compileOnly",
      "pmd",
      "integrationTest",
      "functionalTest",
      "smokeTest",
      "contractTestRuntimeClasspath",
      "contractTestCompileClasspath"
    ]
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
  }

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.

  test {
    failFast = true
  }

  def flyingSaucerVersion = '9.1.22'

  dependencyManagement {
    imports {
      mavenBom "org.xhtmlrenderer:flying-saucer-pdf:${flyingSaucerVersion}"
    }
  }

  ext {
    junit = '5.9.2'
    reformLogging = '6.0.1'
    flyingSaucer = flyingSaucerVersion
    openPdf = dependencyManagement.importedProperties['openpdf.version']
  }

}

project.tasks['sonarqube'].dependsOn test, integrationTest, jacocoTestReport
project.tasks['check'].dependsOn integrationTest

pmd {
  toolVersion = "6.42.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest]
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: RPE PDF Service"
    property "sonar.projectKey", "uk.gov.hmcts.reform:rpe-pdf-service"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.exclusions", "**/config/**"
  }
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

ext {
    log4JVersion = '2.20.0'
    pactVersion = '4.3.5'
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.13'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: reformLogging
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-web', version: '2.6.4'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit
  testImplementation("org.junit.vintage:junit-vintage-engine") {
    exclude group: "org.hamcrest", module: "hamcrest-core"
  }
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junit
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.27'

  functionalTestImplementation group: 'io.rest-assured', name: 'rest-assured'

  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: pactVersion
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: pactVersion
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: pactVersion
  contractTestImplementation("org.junit.jupiter:junit-jupiter-api:5.9.2")
  contractTestRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.2")
  contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.9.2')

  implementation project(':pdf-generator')
}


mainClassName = 'uk.gov.hmcts.reform.pdf.service.PDFServiceApplication'

bootJar {
  archiveFileName = 'pdf-service-all.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}


task runProviderPactVerification(type: Test) {
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

runProviderPactVerification.dependsOn contractTest

runProviderPactVerification.finalizedBy pactVerify

